// CensusData.java
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;

@Entity
public class CensusData {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    private String name;
    private int age;
    private String gender;

    // Constructors, getters, and setters (generated by your IDE or manually).
}
// CensusDataRepository.java
import org.springframework.data.jpa.repository.JpaRepository;

public interface CensusDataRepository extends JpaRepository<CensusData, Long> {
}
// CensusDataService.java
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

@Service
public class CensusDataService {

    private final CensusDataRepository censusDataRepository;

    @Autowired
    public CensusDataService(CensusDataRepository censusDataRepository) {
        this.censusDataRepository = censusDataRepository;
    }

    public CensusData saveCensusData(CensusData censusData) {
        return censusDataRepository.save(censusData);
    }

    public List<CensusData> getAllCensusData() {
        return censusDataRepository.findAll();
    }
}
// CensusDataController.java
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/api/census-data")
public class CensusDataController {

    private final CensusDataService censusDataService;

    @Autowired
    public CensusDataController(CensusDataService censusDataService) {
        this.censusDataService = censusDataService;
    }

    @PostMapping("/submit")
    public CensusData submitCensusData(@RequestBody CensusData censusData) {
        return censusDataService.saveCensusData(censusData);
    }

    @GetMapping("/all")
    public List<CensusData> getAllCensusData() {
        return censusDataService.getAllCensusData();
    }
}
// DataCollectionApplication.java
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class DataCollectionApplication {
    public static void main(String[] args) {
        SpringApplication.run(DataCollectionApplication.class, args);
    }
}
// CensusData.java
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;

@Entity
public class CensusData {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    private String name;
    private int age;
    private String gender;

    // Constructors, getters, and setters
}
// CensusDataRepository.java
import org.springframework.data.jpa.repository.JpaRepository;
// CensusDataController.java
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/api/census-data")
public class CensusDataController {

    private final CensusDataService censusDataService;

    @Autowired
    public CensusDataController(CensusDataService censusDataService) {
        this.censusDataService = censusDataService;
    }

    @PostMapping("/submit")
    public CensusData submitCensusData(@RequestBody CensusData censusData) {
        return censusDataService.saveCensusData(censusData);
    }

    @GetMapping("/all")
    public List<CensusData> getAllCensusData() {
        return censusDataService.getAllCensusData();
    }
}
<!-- Add these dependencies to your pom.xml -->
<dependencies>
    <!-- JDBC and H2 Database -->
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-data-jpa</artifactId>
    </dependency>
    <dependency>
        <groupId>com.h2database</groupId>
        <artifactId>h2</artifactId>
        <scope>runtime</scope>
    </dependency>

    <!-- JDBC for database connectivity -->
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-jdbc</artifactId>
    </dependency>
</dependencies>
# application.properties

spring.datasource.url=jdbc:h2:mem:testdb
spring.datasource.driverClassName=org.h2.Driver
spring.datasource.username=sa
spring.datasource.password=password
spring.jpa.database-platform=org.hibernate.dialect.H2Dialect
// CensusData.java
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;

@Entity
public class CensusData {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    private String name;
    private int age;
    private String gender;

    // Constructors, getters, and setters
}
// CensusDataRepository.java
import org.springframework.data.repository.CrudRepository;

public interface CensusDataRepository extends CrudRepository<CensusData, Long> {
}
// CensusDataService.java
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
public class CensusDataService {

    private final CensusDataRepository censusDataRepository;

    @Autowired
    public CensusDataService(CensusDataRepository censusDataRepository) {
        this.censusDataRepository = censusDataRepository;
    }

    public CensusData saveCensusData(CensusData censusData) {
        return censusDataRepository.save(censusData);
    }

    public List<CensusData> getAllCensusData() {
        return (List<CensusData>) censusDataRepository.findAll();
    }
}
// CensusDataService.java
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
public class CensusDataService {

    private final CensusDataRepository censusDataRepository;

    @Autowired
    public CensusDataService(CensusDataRepository censusDataRepository) {
        this.censusDataRepository = censusDataRepository;
    }

    public CensusData saveCensusData(CensusData censusData) {
        return censusDataRepository.save(censusData);
    }

    public List<CensusData> getAllCensusData() {
        return (List<CensusData>) censusDataRepository.findAll();
    }
}
// CensusDataController.java
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/api/census-data")
public class CensusDataController {

    private final CensusDataService censusDataService;

    @Autowired
    public CensusDataController(CensusDataService censusDataService) {
        this.censusDataService = censusDataService;
    }

    @PostMapping("/submit")
    public CensusData submitCensusData(@RequestBody CensusData censusData) {
        return censusDataService.saveCensusData(censusData);
    }

    @GetMapping("/all")
    public List<CensusData> getAllCensusData() {
        return censusDataService.getAllCensusData();
    }
}
// CensusDataController.java
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/api/census-data")
public class CensusDataController {

    private final CensusDataService censusDataService;

    @Autowired
    public CensusDataController(CensusDataService censusDataService) {
        this.censusDataService = censusDataService;
    }

    @PostMapping("/submit")
    public CensusData submitCensusData(@RequestBody CensusData censusData) {
        return censusDataService.saveCensusData(censusData);
    }

    @GetMapping("/all")
    public List<CensusData> getAllCensusData() {
        return censusDataService.getAllCensusData();
    }
}

............................................

import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

class CensusData {
    private String name;
    private int age;
    private String gender;

    public CensusData(String name, int age, String gender) {
        this.name = name;
        this.age = age;
        this.gender = gender;
    }

    public String getName() {
        return name;
    }

    public int getAge() {
        return age;
    }

    public String getGender() {
        return gender;
    }
}

class CensusDataService {
    private List<CensusData> censusDataList = new ArrayList<>();

    public void addCensusData(CensusData censusData) {
        censusDataList.add(censusData);
    }

    public List<CensusData> getAllCensusData() {
        return new ArrayList<>(censusDataList);
    }

    // Simple analysis: Count the number of males and females
    public void analyzeCensusData() {
        long maleCount = censusDataList.stream()
                .filter(data -> "Male".equalsIgnoreCase(data.getGender()))
                .count();
        long femaleCount = censusDataList.stream()
                .filter(data -> "Female".equalsIgnoreCase(data.getGender()))
                .count();

        System.out.println("Analysis Results:");
        System.out.println("Number of Males: " + maleCount);
        System.out.println("Number of Females: " + femaleCount);
    }
}

public class CensusApp {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        CensusDataService censusDataService = new CensusDataService();

        while (true) {
            System.out.println("1. Enter Census Data");
            System.out.println("2. View Census Data");
            System.out.println("3. Analyze Census Data");
            System.out.println("4. Exit");
            System.out.print("Enter your choice: ");

            int choice = scanner.nextInt();
            scanner.nextLine(); // Consume the newline character

            switch (choice) {
                case 1:
                    System.out.print("Enter Name: ");
                    String name = scanner.nextLine();

                    System.out.print("Enter Age: ");
                    int age = scanner.nextInt();
                    scanner.nextLine(); // Consume the newline character

                    System.out.print("Enter Gender (Male/Female): ");
                    String gender = scanner.nextLine();

                    CensusData censusData = new CensusData(name, age, gender);
                    censusDataService.addCensusData(censusData);

                    System.out.println("Census Data Entered Successfully!");
                    break;

                case 2:
                    List<CensusData> allCensusData = censusDataService.getAllCensusData();
                    System.out.println("Census Data:");
                    for (CensusData data : allCensusData) {
                        System.out.println("Name: " + data.getName() + ", Age: " + data.getAge() + ", Gender: " + data.getGender());
                    }
                    break;

                case 3:
                    censusDataService.analyzeCensusData();
                    break;

                case 4:
                    System.out.println("Exiting Census App. Goodbye!");
                    System.exit(0);

                default:
                    System.out.println("Invalid choice. Please enter a valid option.");
            }
        }
    }
}
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import java.util.List;
import static org.junit.jupiter.api.Assertions.assertEquals;

class CensusDataServiceTest {

    private CensusDataService censusDataService;

    @BeforeEach
    void setUp() {
        censusDataService = new CensusDataService();
    }

    @Test
    void addCensusData() {
        CensusData censusData = new CensusData("John Doe", 25, "Male");
        censusDataService.addCensusData(censusData);

        List<CensusData> allCensusData = censusDataService.getAllCensusData();
        assertEquals(1, allCensusData.size());
        assertEquals("John Doe", allCensusData.get(0).getName());
        assertEquals(25, allCensusData.get(0).getAge());
        assertEquals("Male", allCensusData.get(0).getGender());
    }

    @Test
    void analyzeCensusData() {
        censusDataService.addCensusData(new CensusData("John Doe", 25, "Male"));
        censusDataService.addCensusData(new CensusData("Jane Doe", 30, "Female"));
        censusDataService.addCensusData(new CensusData("Alice", 22, "Female"));

        censusDataService.analyzeCensusData();

        // Assuming the analyzeCensusData method prints the results to the console
    }
}
mvn clean install
java -jar target/your-application.jar
# Dockerfile
FROM openjdk:11
COPY target/your-application.jar /app.jar
CMD ["java", "-jar", "/app.jar"]
docker build -t your-application .
docker run -p 8080:8080 your-application
# Log in to your Heroku account
heroku login

# Create a Heroku app
heroku create your-app-name

# Deploy your application
git push heroku master
# Configure your AWS CLI with your credentials
aws configure

# Navigate to your project directory
cd your-project-directory

# Create a JAR file
mvn clean install

# Deploy to AWS Elastic Beanstalk
eb init -p java your-application
eb create your-environment-name
/**
 * Represents a CensusData object with name, age, and gender information.
 */
public class CensusData {
    // ... code ...
}
/**
 * Service for handling census data operations.
 */
public class CensusDataService {
    /**
     * Adds census data to the system.
     *
     * @param censusData The CensusData object to be added.
     */
    public void addCensusData(CensusData censusData) {
        // ... code ...
    }
}
CREATE TABLE census_data (
    id INT PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    age INT NOT NULL,
    gender VARCHAR(10) NOT NULL
);
CREATE INDEX idx_name ON census_data(name);
# Data Collection Census Project

## Overview

This project is a data collection census application for recording and analyzing census data.

## Table of Contents

- [Getting Started](#getting-started)
- [Usage](#usage)
- [Database Schema](#database-schema)
- [API Documentation](#api-documentation)
- [Contributing](#contributing)
- [License](#license)

## Getting Started

To run the application locally, follow these steps:

1. Install Java and Maven.
2. Clone the repository.
3. Run `mvn clean install` to build the project.
4. Run the application with `java -jar target/data-collection-census.jar`.

## Usage

- Access the application at `http://localhost:8080`.
- Use the provided REST APIs for data entry and retrieval.

## Database Schema

The database schema consists of the following tables:

- `census_data`: Stores information about individuals in the census.

| Column  | Type         | Description             |
|---------|--------------|-------------------------|
| id      | INT (PK)      | Unique identifier       |
| name    | VARCHAR(255)  | Name of the individual  |
| age     | INT          | Age of the individual   |
| gender  | VARCHAR(10)   | Gender of the individual|

## API Documentation

API documentation is available at `http://localhost:8080/swagger-ui.html`.

## Contributing

1. Fork the repository.
2. Create a new branch (`git checkout -b feature/foo-bar`).
3. Make your changes.
4. Commit your changes (`git commit -m 'Add new feature'`).
5. Push to the branch (`git push origin feature/foo-bar`).
6. Create a new pull request.

## License

This project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.

public interface CensusDataRepository extends JpaRepository<CensusData, Long> {
}
// CensusDataService.java
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
public class CensusDataService {

    private final CensusDataRepository censusDataRepository;

    @Autowired
    public CensusDataService(CensusDataRepository censusDataRepository) {
        this.censusDataRepository = censusDataRepository;
    }

    public CensusData saveCensusData(CensusData censusData) {
        return censusDataRepository.save(censusData);
    }

    public List<CensusData> getAllCensusData() {
        return censusDataRepository.findAll();
    }
}
